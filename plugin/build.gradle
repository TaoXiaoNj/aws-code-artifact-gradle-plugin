/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.11/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    id 'com.gradle.plugin-publish' version '2.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation libs.spock.core

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


group = 'io.github.taoxiaonj'
version = '0.2.0'

gradlePlugin {
    website = 'https://github.com/TaoXiaoNj/aws-code-artifact-gradle-plugin'
    vcsUrl = 'https://github.com/TaoXiaoNj/aws-code-artifact-gradle-plugin'

    // Define the plugin
    plugins {
        awsCodeArtifact {
            id = 'io.github.taoxiaonj.aws-codeartifact'
            displayName = 'AWS CodeArtifact Gradle Plugin'
            description = 'A Gradle plugin to simplify AWS CodeArtifact repository configuration with automatic SSO token authentication and caching.'
            tags = ['aws', 'codeartifact', 'maven', 'repository', 'authentication']
            implementationClass = 'io.github.taoxiaonj.aws.codeartifact.AwsCodeArtifactGradlePluginPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
